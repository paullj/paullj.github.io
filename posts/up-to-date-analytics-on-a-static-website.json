{"number":27,"slug":"up-to-date-analytics-on-a-static-website","url":"https://github.com/paullj/paullj.github.io/discussions/27","title":"Up-To-Date  Analytics on a Static Website","description":"How I added simple, privacy focused analytics with up-to-date view counts to a static blog","publishedAt":"2022-06-10T12:00Z","lastEditedAt":"2022-06-10T12:00:12Z","createdAt":"2022-06-09T18:45:39Z","author":{"avatarUrl":"https://avatars.githubusercontent.com/u/8403295?s=100&u=1341bb834ef7376719f208388732fcb78aee8899&v=4","login":"paullj","url":"https://github.com/paullj"},"category":"Published Posts","content":"\n<p>I have a <a\n  href=\"https://paullj.github.io/posts/how-this-blog-makes-the-most-of-github\"\n  rel=\"nofollow noopener noreferrer\"\n  target=\"_blank\"\n>previous post</a> talking about how this website and blog is powered by GitHub Discussions and SvelteKit; but I thought I would go into more detail on how I collect basic analytics for this website.</p>\n<p>This website uses <a\n  href=\"https://www.goatcounter.com/\"\n  rel=\"nofollow noopener noreferrer\"\n  target=\"_blank\"\n>GoatCounter</a>, an open source web analytics platform which does not track any personal data. It is lightweight and fast with a focus on privacy collecting minimal information from each unique visitor. It is perfect for this application where detailed analytics are overkill. </p>\n<blockquote>\n<p>SvelteKit includes a <a\n  href=\"https://kit.svelte.dev/docs/appendix#routing\"\n  rel=\"nofollow noopener noreferrer\"\n  target=\"_blank\"\n>client-side router</a> that intercepts navigations (from the user clicking on links, or interacting with the back/forward buttons) and updates the page contents, rather than letting the browser handle the navigation by reloading.</p>\n</blockquote>\n<p>This means that we have to manually update page view by hooking into SvelteKitâ€™s <a\n  href=\"https://kit.svelte.dev/docs/modules#$app-navigation-afternavigate\"\n  rel=\"nofollow noopener noreferrer\"\n  target=\"_blank\"\n><code>afterNavigate</code> life cycle function</a> as shown in the snippet below. This function runs when ever a page mounts, or when SvelteKit navigates to a new URL but stays on the same component.</p>\n<pre class=\"language-ts\"><code class=\"language-ts\">  <span class=\"token function\">afterNavigate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> to <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>goatcounter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      window<span class=\"token punctuation\">.</span>goatcounter<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n        path<span class=\"token operator\">:</span> to<span class=\"token punctuation\">.</span>pathname<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>GoatCounter makes it very easy to <a\n  href=\"https://goatcounter.com/help/spa\"\n  rel=\"nofollow noopener noreferrer\"\n  target=\"_blank\"\n>send view count data</a> with the correct path using a small script.</p>\n<p>Each post is displayed with its view count on the main page, this data is also easily fetched from GoatCounter. At build time the updated unique visitor count is fetched from the <a\n  href=\"https://goatcounter.com/help/visitor-counter#json-44\"\n  rel=\"nofollow noopener noreferrer\"\n  target=\"_blank\"\n>GoatCounter JSON API</a>.</p>\n<p>If this website is built and redeployed infrequently, how does the view count get updated? By utilising <a\n  href=\"https://svelte.dev/tutorial/actions\"\n  rel=\"nofollow noopener noreferrer\"\n  target=\"_blank\"\n>Svelte actions</a> and the <code>use</code> directive. A custom action takes in an asynchronous function which returns a string or number and updates the inner HTML of the target HTML element with the response of the asynchronous function. This allows for some elements to be partially hydrated after page load. </p>\n<pre class=\"language-svelte\"><code class=\"language-svelte\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\"><span class=\"token namespace\">use:</span>hydrateAction=</span><span class=\"token language-javascript\"><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">await</span> <span class=\"token function\">getViewCount</span><span class=\"token punctuation\">(</span>slug<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token language-javascript\"><span class=\"token punctuation\">&#123;</span>viewCount<span class=\"token punctuation\">&#125;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>You can see code for the action <a\n  href=\"https://github.com/paullj/paullj.github.io/blob/main/src/lib/actions/hydrate.ts\"\n  rel=\"nofollow noopener noreferrer\"\n  target=\"_blank\"\n>here</a>, and the function to get the view count <a\n  href=\"https://github.com/paullj/paullj.github.io/blob/main/src/lib/utils/getViewCount.ts\"\n  rel=\"nofollow noopener noreferrer\"\n  target=\"_blank\"\n>here</a>.</p>\n<p>This approach gets the best of both worlds for a static website; fast page load and up-to-date view counts. The same approach could also be used to partially hydrate any other data on a static website that updates more frequently than rebuilding the website.</p>\n","reactions":0,"comments":0,"readingTime":2,"viewCount":0}