{/* Inlined to avoid FOUC. */}
<script is:inline>
  const lightModePref = window.matchMedia("(prefers-color-scheme: light)");

  function getUserPref() {
    const storedTheme = typeof localStorage !== "undefined" && localStorage.getItem("theme");
    return storedTheme || (lightModePref.matches ? "light" : "dark");
  }

  function setTheme(newTheme) {
    if (!newTheme || (newTheme !== "light" && newTheme !== "dark")) {
      return console.warn(
        `Incorrect theme value received. Expected 'light' or 'dark', received ${newTheme}`,
      );
    }

    const root = document.documentElement;

    // class already set to newTheme, exit early
    if (newTheme === root.getAttribute("data-theme")) {
      return;
    }

    root.setAttribute("data-theme", newTheme);

    const colorThemeMetaTag = document.querySelector("meta[name='theme-color']");
    const bgColour = getComputedStyle(document.body).getPropertyValue("--theme-bg");
    colorThemeMetaTag.setAttribute("content", `hsl(${bgColour})`);
    if (typeof localStorage !== "undefined") {
      localStorage.setItem("theme", newTheme);
    }
  }

  // initial setup
  setTheme(getUserPref());

  // View Transitions hook to restore theme
  document.addEventListener("astro:after-swap", () => setTheme(getUserPref()));

  // listen for theme-change custom event, fired in src/components/ThemeToggle.astro
  document.addEventListener("theme-change", (e) => {
    console.log("Theme change event received", e.detail.theme);
    setTheme(e.detail.theme);
  });

  // listen for prefers-color-scheme change.
  lightModePref.addEventListener("change", (e) => setTheme(e.matches ? "light" : "dark"));
</script>
